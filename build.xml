<project name="Cumulus" default="deploy" basedir="." xmlns:sf="antlib:com.salesforce">

    <include file="${basedir}/lib/ant-salesforce.xml" />

    <taskdef 
         resource="net/sf/antcontrib/antlib.xml"
         classpath="${basedir}/lib/ant-contrib-1.0b2.jar" />

    <!-- If no propertyfile was passed in command line, attempt to load a build.properties if it exists -->
    <if>
      <and>
        <not><isset property="sf:username" /></not>
        <available file="${basedir}/build.properties" />
      </and>
      <then>
        <loadproperties srcFile="${basedir}/build.properties"/>
      </then>
    </if>

    <!-- Load up the version.properties file to get desired versions -->
    <loadproperties srcFile="${basedir}/version.properties"/>

    <!-- Cumulus specific macros -->
    <macrodef name="getPackageVersions" description="Gets the version for all installed packages">
      <sequential>
        <delete dir="${basedir}/installedPackages"/>
        <mkdir dir="${basedir}/installedPackages"/>

        <sf:bulkRetrieve
            username="${sf.username}"
            password="${sf.password}"
            metadataType="InstalledPackage"
            retrieveTarget="${basedir}/installedPackages"/>

        <getPackageVersion namespace="npe01" refresh="false" />
        <getPackageVersion namespace="npo02" refresh="false" />
        <getPackageVersion namespace="npe03" refresh="false" />
        <getPackageVersion namespace="npe4" refresh="false" />
        <getPackageVersion namespace="npe5" refresh="false" />
        <getPackageVersion namespace="npsp" refresh="false" />

        <echo>Dependent Package Versions:
-------------------------------
npe01: ${InstalledPackage.npe01.versionNumber} (${version.npe01} required)
npo02: ${InstalledPackage.npo02.versionNumber} (${version.npo02} required)
npe03: ${InstalledPackage.npe03.versionNumber} (${version.npe03} required)
npe4: ${InstalledPackage.npe4.versionNumber} (${version.npe4} required)
npe5: ${InstalledPackage.npe5.versionNumber} (${version.npe5} required)
npsp: ${InstalledPackage.npsp.versionNumber} (${version.npsp} required)

        </echo>

        <delete dir="${basedir}/installedPackages"/>

      </sequential>
    </macrodef>


    <macrodef name="updateDependentPackages">
      <sequential>
        <getPackageVersions />

        <!-- npsp depends on all other packages.  If it is installed and other packages need to be downgraded (uninstalled), uninstall npsp first -->
        <if>
          <and>
            <not><equals arg1="${InstalledPackage.npsp.versionNumber}" arg2="Not Installed" /></not>
            <or>
              <bool><isgreaterthan arg1="${InstalledPackage.npe01.versionNumber}" arg2="version.npe01" /></bool>
              <bool><isgreaterthan arg1="${InstalledPackage.npo02.versionNumber}" arg2="version.npo02" /></bool>
              <bool><isgreaterthan arg1="${InstalledPackage.npe03.versionNumber}" arg2="version.npe03" /></bool>
              <bool><isgreaterthan arg1="${InstalledPackage.npe4.versionNumber}" arg2="version.npe4" /></bool>
              <bool><isgreaterthan arg1="${InstalledPackage.npe5.versionNumber}" arg2="version.npe5" /></bool>
            </or>
          </and>
          <then>
            <echo>Uninstalling npsp ${InstalledPackage.npsp.versionNumber} to allow for downgrade</echo>
            <uninstallPackage namespace="npsp" username="${sf.username}" password="${sf.password}" />

            <!-- Override the cached installed version of npsp so we don't have to fetch versions again -->
            <var name="InstalledPackage.npsp.versionNumber" value="Not Installed" />
          </then>
        </if>

        <!-- npo02 depends on npe01 so we have to uninstall npo02 first if npo02 needs downgraded -->
        <if>
          <and>
            <!-- npo02 is installed -->
            <not><equals arg1="${InstalledPackage.npo02.versionNumber}" arg2="Not Installed" /></not>
            <!-- and npe01 need downgraded -->
            <bool><isgreaterthan arg1="${InstalledPackage.npe01.versionNumber}" arg2="${version.npe01}" /></bool>
          </and>  
          <then>
            <echo>Uninstalling npo02 ${InstalledPackage.npe01.versionNumber} to allow for npe01 downgrade</echo>
            <uninstallPackage namespace="npo02" username="${sf.username}" password="${sf.password}" />

            <!-- Override the cached installed version of npo02 so we don't have to fetch versions again -->
            <var name="InstalledPackage.npo02.versionNumber" value="Not Installed" />
          </then>
        </if>

        <updatePackageVersion namespace="npe01" version="${version.npe01}" />
        <updatePackageVersion namespace="npo02" version="${version.npo02}" />
        <updatePackageVersion namespace="npe03" version="${version.npe03}" />
        <updatePackageVersion namespace="npe4" version="${version.npe4}" />
        <updatePackageVersion namespace="npe5" version="${version.npe5}" />
        <updatePackageVersion namespace="npsp" version="${version.npsp}" />

      </sequential>
    </macrodef>


    <!-- Cumulus Primary Build Targets -->

    <!-- deploy: Run a full deployment including running all tests.  Does not attempt to clean target org or ensure dependent package versions are correct -->
    <target name="deploy">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="true" maxPoll="200" />
    </target>

    <!-- deployWithoutTests: Run a full deployment but don't run all tests.  This is useful if you already know tests will pass from previous runs and just want to deploy faster -->
    <target name="deployWithoutTest">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="src" runAllTests="false" maxPoll="200" />
    </target>

    <!-- deployUnpackaged: Deploy the unpackaged directory containing metadata used in builds but not included in the Cumulus managed package -->
    <target name="deployUnpackaged">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="unpackaged" runAllTests="false" maxPoll="200" />
    </target>

    <!-- deployCI: Does a full build including uninstalling previously deployed unpackaged code, updating managed package versions, and then deploying Cumulus with all tests --> 
    <!-- !!!WARNING!!!: DO NOT run this against a real production org as it will delete everything.  It is designed to clear the target org to ensure a clean build test. -->
    <target name="deployCI">
      <!-- First, uninstall all unpackaged code from the target org.  We have to do this first so we can uninstall and reinstall any managed packages not at the right version -->
      <antcall target="uninstallCumulus" />

      <!-- Deploy any unpackaged metadata needed for builds -->
      <antcall target="deployUnpackaged" />

      <!-- Update any managed packages which are not at the right version -->
      <antcall target="updateDependentPackages" />

      <!-- Finally, do a deploy with all tests -->
      <antcall target="deploy" />
    </target>

    <!-- deployCIPackageOrg: Does a full build against the package org.  This differs from deployCI in that it uses destroyStaleMetadata instead of uninstallCumulus.
         There are a few assumptions.  We never downgrade a dependent managed package in the packaging org.  This removes the need to completely remove
         all metadata to allow a package downgrade.  In the package org, we can't delete all metadata once a production managed release is cut so this approach is required -->
    <target name="deployCIPackageOrg">
      <!-- First, delete any metadata from the org which is not in the repo -->
      <antcall target="destroyStaleMetadata" />

      <!-- Deploy any unpackaged metadata needed for builds -->
      <antcall target="deployUnpackaged" />

      <!-- Update any managed packages which are not at the right version -->
      <antcall target="updateDependentPackages" />

      <!-- Finally, do a deploy with all tests -->
      <antcall target="deploy" />
    </target>

    <!-- Deploys the latest managed beta (UAT) release to an org -->
    <!-- !!!WARNING!!!: DO NOT run this against a real production org as it will delete everything.  It is designed to clear the target org to ensure a clean build test. -->
    <target name="deployManagedUAT">
      <!-- Get the latest beta release tag name -->
      <get src="http://mrbelvedere.salesforcefoundation.org/mrbelvedere/repo/SalesforceFoundation/Cumulus/version/beta/tag" dest="${basedir}/managed_uat_tag" />
      <loadfile property="managed_uat_tag" srcfile="${basedir}/managed_uat_tag" />
      <delete file="${basedir}/managed_uat_tag" />

      <!-- Fetch the version.properties file for the release from GitHub -->
      <get src="https://raw.github.com/SalesforceFoundation/Cumulus/${managed_uat_tag}/version.properties" dest="${basedir}/version.properties.uat" />

      <!-- Since we want to use the versions required by the tag rather than the currently checked out code, unset all version properties and load the version.properties.uat file -->
      <var name="version.npe01" unset="true" />
      <var name="version.npo02" unset="true" />
      <var name="version.npe03" unset="true" />
      <var name="version.npe4" unset="true" />
      <var name="version.npe5" unset="true" />
      <loadproperties srcFile="${basedir}/version.properties.uat"/>
      <delete file="${basedir}/version.properties.uat" />

      <!-- Get the latest beta release version number -->
      <get src="http://mrbelvedere.salesforcefoundation.org/mrbelvedere/repo/SalesforceFoundation/Cumulus/version/beta" dest="${basedir}/version_uat" />
      <loadfile property="version.npsp.uat" srcfile="${basedir}/version_uat" />
      <var name="version.npsp" value="${version.npsp.uat}" />
      <delete file="${basedir}/version_uat" />

      <getPackageVersions />

      <!-- If npsp managed package is installed and version is not current, uninstall the package -->
      <if>
        <and>
          <not><equals arg1="${InstalledPackage.npsp.versionNumber}" arg2="Not Installed" /></not>
          <not><equals arg1="${InstalledPackage.npsp.versionNumber}" arg2="${version.npsp.uat}" /></not>
        </and>
        <then>
          <echo>Uninstalling npsp ${InstalledPackage.npsp.versionNumber}</echo>
          <uninstallPackage namespace="npsp" username="${sf.username}" password="${sf.password}" />    
        </then>
      </if>

      <!-- Deploy any unpackaged metadata needed for builds -->
      <antcall target="deployUnpackaged" />

      <antcall target="updateDependentPackages" />

      <antcall target="runAllTests" />

    </target>


    <!-- Cumulus Utility Build Targets -->

    <target name="destroyStaleMetadata">
      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />

      <!-- Fetch all metadata in the Cumulus package from target org -->
      <retrievePackaged dir="uninstallsrc" package="Cumulus" />

      <!-- Build a destructiveChanges.xml pacckage to delete metadata in org but not in repo -->
      <buildDestroyStaleMetadata srcdir="uninstallsrc" commdir="src" dir="uninstall" />

      <!-- deploy the destructiveChanges.xml package -->
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall" runAllTests="false" purgeOnDelete="true" maxPoll="200" />

      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />
    </target>

    <!-- uninstallCumulus: Removes all metadata from the Cumulus package for types used in Cumulus -->
    <target name="uninstallCumulus">
      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />
      <retrievePackaged dir="uninstallsrc" package="Cumulus" />
      <buildPackagedDestructiveChanges srcdir="uninstallsrc" dir="uninstall" package="Cumulus" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall" runAllTests="false" purgeOnDelete="true" maxPoll="200" />
      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />
    </target>

    <!-- uninstallCumulus: Removes all non-standard unpackaged metadata from the org for the metadata types used in Cumulus -->
    <target name="uninstallCumulusUnpackaged">
      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />
      <retrieveUnpackaged dir="uninstallsrc" />
      <deleteWhitelistedMetadata dir="uninstallsrc/unpackaged" />
      <buildUnpackagedDestructiveChanges srcdir="uninstallsrc" dir="uninstall" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/standard" runAllTests="false" maxPoll="200" />
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="uninstall/unpackaged" runAllTests="false" purgeOnDelete="true" maxPoll="200" />
      <delete dir="uninstallsrc" />
      <delete dir="uninstall" />
    </target>

    <!-- updateDependendentPackages: Ensures all dependent packages are the correct version -->
    <target name="updateDependentPackages">
      <updateDependentPackages />
    </target>

    <!-- Developer focused build targets -->

    <!-- retrieveUnpackaged: Retrieves all unpackaged metadata from target org into the unpackaged directory -->
    <target name="retrieveUnpackaged">
      <retrieveUnpackaged dir="org_unpackaged" /> 
    </target>

    <!-- retrievePackaged: Retrieves all metadata from the Cumulus package in the target org into the packaged directory -->
    <target name="retrievePackaged">
      <retrievePackaged dir="packaged" package="Cumulus" /> 
    </target>

    <!-- runAllTests: Uses an empty package manifest to trigger execution of all tests in the target org without deploying any actual code changes -->
    <target name="runAllTests">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" deployRoot="lib/empty" runAllTests="true" maxPoll="200" />
    </target>

    <!-- updatePackageXml: Builds a new package.xml based upon the metadata in the src directory -->
    <target name="updatePackageXml">
      <buildPackageXml package="Cumulus" version="29.0" />
    </target>

    <target name="updateMetaXml">
      <updateMetaXml dir="${basedir}/src" namespace="npe01" version="${version.npe01}" />
      <updateMetaXml dir="${basedir}/src" namespace="npo02" version="${version.npo02}" />
      <updateMetaXml dir="${basedir}/src" namespace="npe03" version="${version.npe03}" />
      <updateMetaXml dir="${basedir}/src" namespace="npe4" version="${version.npe4}" />
      <updateMetaXml dir="${basedir}/src" namespace="npe5" version="${version.npe5}" />
    </target>

    <target name="testXml">
      <xmlproperty file="src/package.xml" />
      <echoproperties />
    </target>
</project>
